{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9abac947",
   "metadata": {},
   "source": [
    "Que[1]. What is the primary goal of Object-Oriented Programming (OOP)?\n",
    "<pre>\n",
    "Ans =>\n",
    "Primary goal of OOPs are:\n",
    " [a] To hold entire data into a single object such that it would be easy to pass this to other methods and objects, \n",
    " [b] To reuse the code in which child classes uses the poperties of the base class,\n",
    " [c] It is used to structure a program into a simple, reusable piece of code,\n",
    " [d] By the use of Abstraction we can easily hide the implementation from the user but shows only essential\n",
    "     information to the user. Using the concept developer can easily make changes and added over time.\n",
    "</pre>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f69a66d",
   "metadata": {},
   "source": [
    "Que[2] What is an object in Python?\n",
    "\n",
    "Ans => Objects are the instances of a particular class. Every other element in Python will be an object of some class, such        as the string, dictionary, number(10,40), etc. will be an object of some corresponding built-in class(int, str) in          Python. Objects are different copies of the class with some actual values."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c528a8be",
   "metadata": {},
   "source": [
    "Que[3] What is a class in Python?\n",
    "\n",
    "Ans =>  A Class is like an object constructor, or a \"blueprint\" for creating objects. It provide a means of bundling data and functionality together and A class can be the combination of methods, objects, constructor, etc...\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec133410",
   "metadata": {},
   "source": [
    "Que[4] What are attributes and methods in a class?\n",
    "\n",
    "Ans => The data values which we store inside an object are called attributes, and\n",
    "       functions which are associated with the object are called methods."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7b20336",
   "metadata": {},
   "source": [
    "Que[5] What is the difference between class variables and instance variables in Python?\n",
    "\n",
    "Ans => <pre style=\"font-color:black; font-style:sans-serif;\">\n",
    "   Class variables are useful for storing data that is shared among all instances of a class, such as constants or            default values. Instance variables are used to store data that is unique to each instance of a class, such as object        properties.\n",
    "\n",
    "   Class variables can be initialized either inside the class definition or outside the class definition and Instance          variables are typically initialized in the constructor of the class.\n",
    "\n",
    "   Class variables are accessed using the class name, followed by the variable name and Instance variables are accessed        using the instance name, followed by the variable name.\n",
    "\n",
    "   Class variables are defined within the class but outside of any class methods and Instance variables are defined            within class methods, typically the constructor.\n",
    "       </pre>"
   ]
  },
  {
   "cell_type": "raw",
   "id": "ee831c89",
   "metadata": {},
   "source": [
    "Que[6] What is the purpose of the self parameter in Python class methods?\n",
    "\n",
    "Ans => SELF represents the instance of class. This handy keyword allows you to access variables, attributes, and methods of        a defined class in Python. The self parameter doesn't have to be named “self,” as you can call it by any other name.\n",
    "       However, the self parameter must always be the first parameter of any class function, regardless of the name chosen.        So instead of self, you could use “Mine” or “Ours” or anything else."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b3f3f867",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My Address is Albert Street\n"
     ]
    }
   ],
   "source": [
    "class Address:\n",
    "  def __init__(mine, street, number):  # Instead of self using any other name.\n",
    "    mine.street = street\n",
    "    mine.number = number\n",
    "\n",
    "  def myfunc(abc):\n",
    "    print(\"My Address is \" + abc.street)\n",
    "\n",
    "p1 = Address(\"Albert Street\", 20)\n",
    "p1.myfunc()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "be4b5041",
   "metadata": {},
   "source": [
    "Que[7] For a library management system, you have to design the \"Book\" class with OOP\n",
    "principles in mind. The “Book” class will have following attributes:\n",
    "a. title: Represents the title of the book.\n",
    "b. author: Represents the author(s) of the book.\n",
    "c. isbn: Represents the ISBN (International Standard Book Number) of the book.\n",
    "d. publication_year: Represents the year of publication of the book.\n",
    "e. available_copies: Represents the number of copies available for checkout.\n",
    "The class will also include the following methods:\n",
    "a. check_out(self): Decrements the available copies by one if there are copies\n",
    "available for checkout.\n",
    "b. return_book(self): Increments the available copies by one when a book is\n",
    "returned.\n",
    "c. display_book_info(self): Displays the information about the book, including its\n",
    "attributes and the number of available copies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0908d0ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ans[7]\n",
    "class Book:\n",
    "    def __init__(self, title, author, isbn, publishYear, avail_copies):\n",
    "        self.title = title\n",
    "        self.author = author\n",
    "        self.isbn = isbn\n",
    "        self.publishYear = publishYear\n",
    "        self.avail_copies = avail_copies\n",
    "        \n",
    "    def check_out(self):\n",
    "        self.avail_copies -= 1\n",
    "    \n",
    "    def return_book(self):\n",
    "        self.avail_copies += 1\n",
    "    \n",
    "    def display_book_info(self):\n",
    "        bookInfo = f\"Book Title: {self.title} \\nBook Author: {self.author} \\nBook ISBN Number: {self.isbn} \\nPublication Year: {self.publishYear} \\nTotal Available Copy: {self.avail_copies}\"\n",
    "        bookTitle = \"Book Title: \" + self.title\n",
    "        bookAuthor = \"Book Author: \" + self.author\n",
    "        bookISBN = \"Book ISBN Number: \" + self.isbn\n",
    "        bookpublishYear = \"Book PublishYear: \" + self.publishYear\n",
    "        booksAvailCopies = \"Book Available Copies: \" + str(self.avail_copies)\n",
    "        \n",
    "        return bookTitle + \"\\n\" + bookAuthor + \"\\n\" + bookISBN + \"\\n\" + bookpublishYear + \"\\n\" + booksAvailCopies\n",
    "    \n",
    "title = \"Golden Time\"   #input(\"Enter Book title: \")\n",
    "author = \"SJ Smith\"     #input(\"Enter Author Name: \")\n",
    "isbn = \"8713459\"        #input(\"Enter ISBN number: \")\n",
    "publishYear = \"2021\"    #input(\"Enter publication year: \")\n",
    "avail_copies = 125      #int(input(\"Enter total available books: \"))\n",
    "booksObj = Book(title, author, isbn, publishYear, avail_copies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4043386c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Originally Book Info------------------------------\n",
      "Book Title: Golden Time\n",
      "Book Author: SJ Smith\n",
      "Book ISBN Number: 8713459\n",
      "Book PublishYear: 2021\n",
      "Book Available Copies: 125\n"
     ]
    }
   ],
   "source": [
    "print(\"Originally Book Info\" + \"-\" * 30 + '\\n' + booksObj.display_book_info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9d313309",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "updated Book Info------------------------------\n",
      "Book Title: Golden Time\n",
      "Book Author: SJ Smith\n",
      "Book ISBN Number: 8713459\n",
      "Book PublishYear: 2021\n",
      "Book Available Copies: 126\n"
     ]
    }
   ],
   "source": [
    "booksObj.return_book()\n",
    "print(\"updated Book Info\" + \"-\" * 30 + '\\n' + booksObj.display_book_info())"
   ]
  },
  {
   "cell_type": "raw",
   "id": "03e6e186",
   "metadata": {},
   "source": [
    "Que[8] For a ticket booking system, you have to design the \"Ticket\" class with OOP\n",
    "principles in mind. The “Ticket” class should have the following attributes:\n",
    "a. ticket_id: Represents the unique identifier for the ticket.\n",
    "b. event_name: Represents the name of the event.\n",
    "c. event_date: Represents the date of the event.\n",
    "d. venue: Represents the venue of the event.\n",
    "e. seat_number: Represents the seat number associated with the ticket.\n",
    "f. price: Represents the price of the ticket.\n",
    "g. is_reserved: Represents the reservation status of the ticket.\n",
    "The class also includes the following methods:\n",
    "a. reserve_ticket(self): Marks the ticket as reserved if it is not already reserved.\n",
    "b. cancel_reservation(self): Cancels the reservation of the ticket if it is already\n",
    "reserved.\n",
    "c. display_ticket_info(self): Displays the information about the ticket, including its\n",
    "attributes and reservation status."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "af7594e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ans[8]\n",
    "class Ticket:\n",
    "    def __init__(self, ticket_id, event_name, event_date, venue, seat_number, price, is_reserved):\n",
    "        self.ticket_id = ticket_id\n",
    "        self.event_name = event_name\n",
    "        self.event_date = event_date\n",
    "        self.venue = venue\n",
    "        self.seat_number = seat_number\n",
    "        self.price = price\n",
    "        self.is_reserved = is_reserved\n",
    "        \n",
    "    def reserve_ticket(self):\n",
    "        if self.is_reserved == False:\n",
    "            self.is_reserved = True\n",
    "    \n",
    "    def cancel_reservation(self):\n",
    "        if self.is_reserved == True:\n",
    "            self.is_reserved = False\n",
    "            \n",
    "    def display_ticket_info(self):\n",
    "        ticketInfo = f\"Ticket ID: {self.ticket_id} \\nEvent Name: {self.event_name} \\nEvent Date: {self.event_date} \\nVenue is: {self.venue} \\nSeat Number: {self.seat_number} \\nTicket Price: {self.price} \\nTicket Reservation Status: {self.is_reserved}\"\n",
    "        return ticketInfo\n",
    "    \n",
    "tikcetId = \"12345\"\n",
    "eventName = \"Mumbai to Banglore\"\n",
    "eventDate = \"12 Jan, 2023\"\n",
    "venue = \"House Warming\"\n",
    "seatNumber = \"B3/25/UB\"\n",
    "price = 1350\n",
    "isReserved = True\n",
    "ticketObj = Ticket(tikcetId, eventName, eventDate, venue, seatNumber, price, isReserved)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "08588045",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ticket ID: 12345 \n",
      "Event Name: Mumbai to Banglore \n",
      "Event Date: 12 Jan, 2023 \n",
      "Venue is: House Warming \n",
      "Seat Number: B3/25/UB \n",
      "Ticket Price: 1350 \n",
      "Ticket Reservation Status: True\n"
     ]
    }
   ],
   "source": [
    "print(ticketObj.display_ticket_info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9cec7fc9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ticket ID: 12345 \n",
      "Event Name: Mumbai to Banglore \n",
      "Event Date: 12 Jan, 2023 \n",
      "Venue is: House Warming \n",
      "Seat Number: B3/25/UB \n",
      "Ticket Price: 1350 \n",
      "Ticket Reservation Status: False\n"
     ]
    }
   ],
   "source": [
    "ticketObj.cancel_reservation()\n",
    "print(ticketObj.display_ticket_info())"
   ]
  },
  {
   "cell_type": "raw",
   "id": "08cde762",
   "metadata": {},
   "source": [
    "Que[9] You are creating a shopping cart for an e-commerce website. Using OOP to model\n",
    "the \"ShoppingCart\" functionality the class should contain following attributes and\n",
    "methods:\n",
    "a. items: Represents the list of items in the shopping cart.\n",
    "The class also includes the following methods:\n",
    "\n",
    "a. add_item(self, item): Adds an item to the shopping cart by appending it to the\n",
    "list of items.\n",
    "b. remove_item(self, item): Removes an item from the shopping cart if it exists in\n",
    "the list.\n",
    "c. view_cart(self): Displays the items currently present in the shopping cart.\n",
    "d. clear_cart(self): Clears all items from the shopping cart by reassigning an\n",
    "empty list to the items attribute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7bb0e9b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ans[9]\n",
    "class ShoppingCart:\n",
    "    def __init__(self, items):\n",
    "        self.items = items\n",
    "        \n",
    "    def add_item(self, item):\n",
    "        self.items.append(item)\n",
    "    \n",
    "    def remove_item(self, item):\n",
    "        self.items.remove(item)\n",
    "    \n",
    "    def view_cart(self):\n",
    "        return self.items\n",
    "    \n",
    "    def clear_cart(self):\n",
    "        self.items = []\n",
    "    \n",
    "items = ['Shirt', 'T-Shirt', 'Lower', 'Kurti']\n",
    "obj = ShoppingCart(items)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "3ac4ec65",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updated Cart:  ['Shirt', 'Lower', 'Kurti', 'PowerBank']\n",
      "Cart after deletion of all items:  []\n"
     ]
    }
   ],
   "source": [
    "obj.add_item(\"PowerBank\")\n",
    "obj.remove_item(\"T-Shirt\")\n",
    "print(\"Updated Cart: \",obj.view_cart())\n",
    "obj.clear_cart()\n",
    "print(\"Cart after deletion of all items: \", obj.view_cart())"
   ]
  },
  {
   "cell_type": "raw",
   "id": "fc5ee9f8",
   "metadata": {},
   "source": [
    "Que[10] 10. Imagine a school management system. You have to design the \"Student\" class using\n",
    "OOP concepts.The “Student” class has the following attributes:\n",
    "a. name: Represents the name of the student.\n",
    "b. age: Represents the age of the student.\n",
    "c. grade: Represents the grade or class of the student.\n",
    "d. student_id: Represents the unique identifier for the student.\n",
    "e. attendance: Represents the attendance record of the student.\n",
    "The class should also include the following methods:\n",
    "a. update_attendance(self, date, status): Updates the attendance record of the\n",
    "student for a given date with the provided status (e.g., present or absent).\n",
    "b. get_attendance(self): Returns the attendance record of the student.\n",
    "c. get_average_attendance(self): Calculates and returns the average\n",
    "attendance percentage of the student based on their attendance record."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "536606ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10/10/2023  :  Present\n",
      "11/10/2023  :  Present\n",
      "12/10/2023  :  Absent\n",
      "13/10/2023  :  Present\n",
      "Total Present Attendance:  75.0 %\n"
     ]
    }
   ],
   "source": [
    "# Ans[10]\n",
    "\n",
    "class Student:\n",
    "    def __init__(self, name, age, grade, student_id, attendance):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "        self.grade = grade\n",
    "        self.student_id = student_id\n",
    "        self.attendance = attendance\n",
    "        \n",
    "    def update_attendance(self, date, status):\n",
    "        self.attendance[date] = status\n",
    "    \n",
    "    def get_attendance(self):\n",
    "        for i,j in attendanceRecord.items():\n",
    "            print(i, \" : \", j)\n",
    "    \n",
    "    def get_average_attendance(self):\n",
    "        totalAttendance = len(self.attendance)\n",
    "        countPresent = 0\n",
    "        for i in self.attendance.values():\n",
    "            if i == \"Present\":\n",
    "                countPresent += 1\n",
    "        #print(countPresent)\n",
    "        totalPercentage = (countPresent / totalAttendance) * 100\n",
    "        print(\"Total Present Attendance: \",totalPercentage, \"%\")\n",
    "    \n",
    "attendanceRecord = {\n",
    "                    \"10/10/2023\": \"Present\", \n",
    "                    \"11/10/2023\": \"Present\", \n",
    "                    \"12/10/2023\": \"Absent\"\n",
    "                   }\n",
    "\n",
    "obj = Student(\"Awanish Kumar\", \"24\", \"A\", 523313, attendanceRecord)\n",
    "obj.update_attendance(\"13/10/2023\", \"Present\") # attendance updated\n",
    "obj.get_attendance()\n",
    "obj.get_average_attendance()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
